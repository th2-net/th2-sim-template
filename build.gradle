plugins {
    id "application"
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.th2.component)
}

group = 'com.exactpro.th2'
version = release_version

repositories {
    mavenCentral()
}

dependencies {
    implementation(libs.th2.common)
    implementation(libs.th2.common.utils)
    implementation(libs.th2.sim)
    api(libs.th2.grpc.sim.template)

    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
    testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    testImplementation(libs.th2.junit.jupiter.integration)
    testImplementation(libs.awaitility)
    testImplementation testFixtures(libs.th2.common)
    testImplementation testFixtures(libs.th2.sim)
}

application.mainClass = "com.exactpro.th2.sim.run.SimulatorServerMain"

tasks.test {
    useJUnitPlatform {
        excludeTags("integration-test")
    }
}

tasks.register("integrationTest", Test) {
    group = "verification"
    useJUnitPlatform {
        includeTags("integration-test")
    }
    testLogging {
        showStandardStreams = true
    }

    if (isPodmanInstalled()) {
        environment("DOCKER_HOST", "unix:///run/user/${getUid()}/podman/podman.sock")
        environment("TESTCONTAINERS_RYUK_DISABLED", "true")
    }
}

static def isPodmanInstalled() {
    try {
        def process = new ProcessBuilder("podman", "--version").start()
        process.waitFor()
        return process.exitValue() == 0
    } catch (IOException ignored) {
        println("podman isn't installed")
        return false
    }
}

static def getUid() {
    new ProcessBuilder("id", "-u").start().inputStream.text.trim()
}